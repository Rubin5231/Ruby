<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleRMarket</Name>
	<SourceCode>
		<Declaration><![CDATA[
//public class NumberSeqModuleBank extends NumberSeqApplicationModule
public class NumberSeqModuleRMarket extends NumberSeqApplicationModule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    /*
    Detailed description of how to setup references for number sequences can
    be found in the method loadModule() on the parent class: NumberSeqApplicationModule.
    */
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        /* Setup market account number */
        datatype.parmDatatypeId(extendedTypeNum(RMarketAccountId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market account"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup market subaccount number */
        datatype.parmDatatypeId(extendedTypeNum(RMarketSubAccountId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market subaccount"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(2);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup market strategy number*/
        datatype.parmDatatypeId(extendedTypeNum(RMarketStrategyId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market strategy"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(3);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup market position number*/
        datatype.parmDatatypeId(extendedTypeNum(RMarketPositionId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market position"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(4);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup market order number */
        datatype.parmDatatypeId(extendedTypeNum(RMarketOrderId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market order"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(5);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup market transaction number */
        datatype.parmDatatypeId(extendedTypeNum(RMarketTransId));
        datatype.parmReferenceHelp(literalStr("Unique key, allocated to market transaction"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(6);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        

        /*
        /* Setup Bank Deposit Slip number */

        datatype.parmDatatypeId(extendedTypeNum(BankDepositNum));
        datatype.parmReferenceHelp(literalStr("@SYS53934"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        
        /* Setup reconciliation voucher number */

        datatype.parmDatatypeId(extendedTypeNum(BankReconcileVoucher));
        datatype.parmReferenceHelp(literalStr("@SYS53935"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(6000);
        datatype.parmWizardHighest(7999);
        datatype.parmSortField(2);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup payment reference for customer payments */

        datatype.parmDatatypeId(extendedTypeNum(BankRecNumRef));
        datatype.parmReferenceHelp(literalStr("@SYS86455"));
        datatype.parmWizardHighest(999999);
        datatype.parmWizardLowest(1);
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(3);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup Bank Prenote number */

        datatype.parmDatatypeId(extendedTypeNum(BankPrenoteNum));
        datatype.parmReferenceHelp(literalStr("@SYS128877"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(4);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // <GEERU>
        //Application for the Purchase of Funds in Hard Currency
        datatype.parmDatatypeId(extendedTypeNum(BankCurrencyTransferId_RU));
        datatype.parmReferenceHelp(literalStr("@GLS114387"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(5);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        //Voucher for Russian bank exchange adjustment
        datatype.parmDatatypeId(extendedTypeNum(BankExchAdjVoucher_RU));
        datatype.parmReferenceHelp(literalStr("@GLS104425"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(570000000);
        datatype.parmWizardHighest(579999999);
        datatype.parmSortField(7);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /*Voucher of Russian cash due announcement */
        datatype.parmDatatypeId(extendedTypeNum(BankCashDueAnnouncement_RU));
        datatype.parmReferenceHelp(literalStr("@GLS113131"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(580000000);
        datatype.parmWizardHighest(589999999);
        datatype.parmSortField(8);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        // </GEERU>
        // <GEEU>
        /* Voucher for Polish bank exchange adjustment */
        datatype.parmDataTypeId(extendedTypeNum(PlBankExchAdjVoucher));
        datatype.parmReferenceHelp(literalStr("@GLS113131"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(560000000);
        datatype.parmWizardHighest(569999999);
        datatype.parmSortField(5);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);

        this.create(datatype);
        // </GEEU>

        // Bank statement Id
        datatype.parmDatatypeId(extendedTypeNum(BankStatementId));
        // Unique key, allocated to importing a bank statement if it has not a statement ID specified.
        datatype.parmReferenceHelp(literalStr("@GLS221336"));
        datatype.parmWizardHighest(999999);
        datatype.parmWizardLowest(1);
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(9);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Download Id
        datatype.parmDatatypeId(extendedTypeNum(BankStatementDownloadId));
        // Unique key, allocated to importing bank statements in a file.
        datatype.parmReferenceHelp(literalStr("@GLS221339"));
        datatype.parmWizardHighest(999999);
        datatype.parmWizardLowest(1);
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(10);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Bank reconcile Id
        datatype.parmDatatypeId(extendedTypeNum(BankReconciliationId));
        // Unique key of reconciliation worksheet.
        datatype.parmReferenceHelp(literalStr("@GLS221337"));
        datatype.parmWizardHighest(999999);
        datatype.parmWizardLowest(1);
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(11);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Add two number sequences for Bank LG
        // Setup Bank LG number
        datatype.parmDatatypeId(extendedTypeNum(BankLGNumber));
        datatype.parmReferenceLabel(literalStr("@SYS314696"));
        datatype.parmReferenceHelp(literalStr("@SYS314703"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(12);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Setup Bank LG transaction number
        datatype.parmDatatypeId(extendedTypeNum(BankLGTransNumber));
        datatype.parmReferenceLabel(literalStr("@SYS314690"));
        datatype.parmReferenceHelp(literalStr("@SYS314674"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(13);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Setup Bank positive pay number
        datatype.parmDatatypeId(extendedTypeNum(BankPositivePayId));
        datatype.parmReferenceHelp(literalStr("@SYS4004486"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(14);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Setup Bank foreign currency revaluation number
        datatype = NumberSeqDatatype::construct();
        datatype.parmDatatypeId(extendedTypeNum(BankCurrencyRevalVoucher));
        datatype.parmReferenceLabel(literalStr("@SYS10991"));
        datatype.parmReferenceHelp(literalStr("@SYS53915"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(1);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(15);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Setup Bank transaction summarization ID
        datatype.parmDatatypeId(extendedTypeNum(BankTransSummarizationID));
        datatype.parmReferenceHelp(literalStr("@CashManagement:BankTransSummarizationNumberSequence"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Setup Bank statement reversal voucher
        datatype.parmDatatypeId(extendedTypeNum(BankStatementReversalVoucher));
        datatype.parmReferenceHelp(literalStr("@CashManagement:BankStatementReversalNumberSequenceDescription"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(17);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::RMarket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleRMarket), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>