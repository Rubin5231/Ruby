<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RMarketStrategyAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RMarketStrategyAction extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record in the table <t>RMarketStrategyAction</t>
    /// </summary>
    /// <param name = "_strategyId">a strategyId</param>
    /// <param name = "_forUpdate">if its updatable</param>
    /// <returns>a table <t>RMarketStrategyAction</t></returns>
    public static RMarketStrategyAction find(RMarketStrategyId  _strategyId,
                                             int                _num,
                                             boolean            _forUpdate = false)
    {
        RMarketStrategyAction action;
        ;
        action.selectForUpdate(_forUpdate);

        if (_strategyId)
        {
            select firstonly action
                where action.StrategyId  == _strategyId
                   && action.Num         == _num;
        }
        
        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static RMarketStrategyAction findRecId(RecId   _recId,
                                                  boolean _forUpdate = false)
    {
        RMarketStrategyAction action;
        ;
        action.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly action
                where action.RecId == _recId;
        }
        
        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if exists a record in the table <t>RMarketStrategyAction</t> with the given parameters
    /// </summary>
    /// <param name = "_strategyId">a strategyId</param>
    /// <returns>a table <t>RMarketStrategyAction</t></returns>
    public static boolean exists(RMarketStrategyId  _strategyId,
                                 int                _num)
    {
        boolean res;
        ;
        res = _strategyId && (select firstonly RecId from RMarketStrategyAction
                               where RMarketStrategyAction.StrategyId  == _strategyId
                                  && RMarketStrategyAction.Num         == _num).RecId != 0;
        
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initValue()
    {
        super();

        this.Type = RMarketStrategyActionType::StopTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRMarketStrategy</Name>
				<Source><![CDATA[
    public void initFromRMarketStrategy(RMarketStrategy _strategy)
    {
        this.StrategyId = _strategy.StrategyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RMarketStrategy</Name>
				<Source><![CDATA[
    public RMarketStrategy RMarketStrategy(boolean _forUpdate = false)
    {
        return RMarketStrategy::find(this.StrategyId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionNumDecrease</Name>
				<Source><![CDATA[
    public void actionNumDecrease()
    {
        RMarketStrategyAction other = RMarketStrategyAction::find(this.StrategyId, this.Num - 1, true);
        if (other)
            RMarketStrategyAction::actionSwapNum(this, other);
        else
        {
            ttsbegin;
            this.Num -= 1;
            if (this.validateWrite())
                this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionNumRaise</Name>
				<Source><![CDATA[
    public void actionNumRaise()
    {
        RMarketStrategyAction other = RMarketStrategyAction::find(this.StrategyId, this.Num + 1, true);
        if (other)
            RMarketStrategyAction::actionSwapNum(this, other);
        else
        {
            ttsbegin;
            this.Num += 1;
            if (this.validateWrite())
                this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionSwapNum</Name>
				<Source><![CDATA[
    public static void actionSwapNum(RMarketStrategyAction _action1, RMarketStrategyAction _action2)
    {
        int actionNum = _action1.Num;

        ttsbegin;
        _action1.Num = _action2.Num;

        _action2.Num = maxInt();
        if (_action2.validateWrite())
            _action2.Update();
        _action2.Num = actionNum;

        if (_action1.validateWrite())
            _action1.update();

        if (_action2.validateWrite())
            _action2.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSignal</Name>
				<Source><![CDATA[
    public boolean calcSignal(RMarketSubAccount _subAccount, RMarketTimestamp _tsCursor)
    {
        RMarketConditionTable condition;
        boolean signal = true;

        while select condition
            where condition.RefRecId == this.RecId
        {
            signal = signal && condition.calc(_subAccount, _tsCursor);
        }

        return signal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>MainIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StrategyId</Name>
			<ExtendedDataType>RMarketStrategyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Num</Name>
			<AllowEdit>No</AllowEdit>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>RMarketStrategyActionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MainIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>StrategyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RMarketStrategy</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RMarketStrategy</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StrategyId</Name>
					<Field>StrategyId</Field>
					<RelatedField>StrategyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>