<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MyWorkflowApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The MyWorkflowApprovalEventHandler workflow outcome event handler.
/// </summary>
public final class MyWorkflowApprovalEventHandler implements WorkflowElementCanceledEventHandler,
	WorkflowElemChangeRequestedEventHandler,
	WorkflowElementCompletedEventHandler,
	WorkflowElementReturnedEventHandler,
	WorkflowElementStartedEventHandler,
	WorkflowElementDeniedEventHandler,
	WorkflowWorkItemsCreatedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once the workflow is started.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::Started);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once the workflow is canceled.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once the workflow is completed.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::Complete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once the workflow is denied.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::Denied);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    public void changeRequested(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once change is requested for the workflow.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::ChangeRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        // TODO:  Write code to execute once the workflow is returned.

        MyWorkflowTable::updateWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),MyWorkflowStatus::Returned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    public void created(WorkflowWorkItemsEventArgs _workflowWorkItemsEventArgs)
    {
        // TODO:  Write code to execute once work items are created.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>