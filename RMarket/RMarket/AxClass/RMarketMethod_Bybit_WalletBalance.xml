<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RMarketMethod_Bybit_WalletBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Получение торгового баланса Bybit
/// https://bybit-exchange.github.io/docs/v5/account/wallet-balance
/// Usage:
/// RMarketMethod_Binance_AccountBalance apiMethod = new RMarketMethod_Binance_AccountBalance();
/// or
/// RMarketMethodInterface_GetAccountBalance apiMethod =
///     RMarketMethodInterface::RMarketMethodInterface_GetAccountBalance(_marketDim.RMarketTable().ApiType);
/// apiMethod.setBaseUrl('https://api.bybit.com');
///     apiMethod.initParameters();
/// apiMethod.execute();
///     List listCon = apiMethod.getKlineList();
/// </summary>
public class RMarketMethod_Bybit_WalletBalance extends RMarketMethod implements RMarketMethodInterface_GetAccountBalance
{
    protected RMarketJson_Bybit_WalletBalance responseContract;
    
    protected str accountType;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary> Конструктор класса </summary>
    public void new()
    {
        apiClient = new RMarketApiClientBybit();
        apiClient.parmHttpMethod(RMarketAPIHttpMethod::GET);
        apiClient.parmMethodUrl('/v5/account/wallet-balance');

        // Do this before execute()
        //apiClient.setBaseUrl(URL _baseUrl);
        //apiClient.setApiKey(RMarketApiKey _apiKey)

    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters()
    {
        //accountType	true	string	Account type
        //                            UTA2.0: UNIFIED
        //                            UTA1.0: UNIFIED, CONTRACT(inverse derivatives wallet)
        //                            Classic account: CONTRACT, SPOT
        //                            To get Funding wallet balance, please go to this endpoint
        //coin	    false	string	Coin name, uppercase only
        //                            If not passed, it returns non-zero asset info
        //                            You can pass multiple coins to query, separated by comma. USDT,USDC
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepare</Name>
				<Source><![CDATA[
    public void prepare()
    {
        apiClient.addQueryParam('accountType', 'UNIFIED');  //Hardcode
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResponse</Name>
				<Source><![CDATA[
    public void processResponse()
    {
        super();

        str responseStr = apiClient.getResponseBody();

        if (apiClient.getHttpStatus() != System.Net.HttpStatusCode::OK)
            throw Error(strfmt("Request returns error!"));
    
        responseContract = RMarketJsonSerializer::deserializeObject(
            classNum(RMarketJson_Bybit_WalletBalance),
            responseStr) as RMarketJson_Bybit_WalletBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultList</Name>
				<Source><![CDATA[
    public List getResultList()
    {
        List retList;
        ListEnumerator enum;

        //if (responseContract && responseContract.parmResult())
        //{
        //    List accountList = responseContract.parmResult().parmList();
        //    if (accountList && accountList.elements() > 0)
        //    {
        //        enum = accountList.getEnumerator();
        //        enum.moveNext();
        //        RMarketJson_Bybit_WalletBalance_Account account = enum.current();
        //        if (account)
        //        {
        //            List coinList = account.parmCoin();
        //            if (coinList && coinList.elements() > 0)
        //            {
        //                enum = coinList.getEnumerator();
        //                enum.moveNext();
        //                RMarketJson_Bybit_WalletBalance_Coin coin = enum.current();
        //                if (coin)
        //                {
        //                    //
        //                }
        //            }

        //        }
        //    }
        //}

        //return retList;
        return responseContract.parmResult().parmList();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>