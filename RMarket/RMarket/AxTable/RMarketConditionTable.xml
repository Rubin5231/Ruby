<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RMarketConditionTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RMarketConditionTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RMarketConditionTable find(RefRecId  _refRecId,
                                             int       _num,
                                             boolean   _forUpdate = false)
    {
        RMarketConditionTable condition;
        ;
        condition.selectForUpdate(_forUpdate);

        if (_refRecId)
        {
            select firstonly condition
                where condition.RefRecId  == _refRecId
                   && condition.Num       == _num;
        }
        
        return condition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    public static boolean exists(RefRecId  _refRecId,
                                 int       _num)
    {
        boolean res;
        ;
        res = _refRecId && (select firstonly RecId from RMarketConditionTable
                             where RMarketConditionTable.RefRecId  == _refRecId
                                && RMarketConditionTable.Num       == _num).RecId != 0;
        
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initValue()
    {
        super();

        //this.Type = RMarketStrategyActionType::StopTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionNumDecrease</Name>
				<Source><![CDATA[
    public void conditionNumDecrease()
    {
        RMarketConditionTable other = RMarketConditionTable::find(this.RefRecId, this.Num - 1, true);
        if (other)
            RMarketConditionTable::conditionwapNum(this, other);
        else
        {
            ttsbegin;
            this.Num -= 1;
            if (this.validateWrite())
                this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionNumRaise</Name>
				<Source><![CDATA[
    public void conditionNumRaise()
    {
        RMarketConditionTable other = RMarketConditionTable::find(this.RefRecId, this.Num + 1, true);
        if (other)
            RMarketConditionTable::conditionwapNum(this, other);
        else
        {
            ttsbegin;
            this.Num += 1;
            if (this.validateWrite())
                this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionwapNum</Name>
				<Source><![CDATA[
    public static void conditionwapNum(RMarketConditionTable _condition1, RMarketConditionTable _condition2)
    {
        int actionNum = _condition1.Num;

        ttsbegin;
        _condition1.Num = _condition2.Num;

        _condition2.Num = maxInt();
        if (_condition2.validateWrite())
            _condition2.Update();
        _condition2.Num = actionNum;

        if (_condition1.validateWrite())
            _condition1.update();

        if (_condition2.validateWrite())
            _condition2.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public boolean calc(RMarketSubAccount _subAccount, RMarketTimestamp _tsCursor)
    {
        boolean ret;
        real leftValue  = this.calcLeftValue(_subAccount, _tsCursor);
        real rightValue = this.calcRightValue(_subAccount, _tsCursor);

        switch (this.ComparisonType)
        {
            case RMarketConditionComparisonType::Equal:
                ret = (leftValue == rightValue);
                break;
            case RMarketConditionComparisonType::Less:
                ret = (leftValue <  rightValue);
                break;
            case RMarketConditionComparisonType::LessOrEqual:
                ret = (leftValue <= rightValue);
                break;
            case RMarketConditionComparisonType::More:
                ret = (leftValue >  rightValue);
                break;
            case RMarketConditionComparisonType::MoreOrEqual:
                ret = (leftValue >= rightValue);
                break;
            default:
                throw error(strFmt("Comparison type %1 isn't implemented yet!", enum2Str(this.ComparisonType)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLeftValue</Name>
				<Source><![CDATA[
    // Loop and calculate conditions
    //while select condition
    //    order by condition.Num
    //    where condition.RefRecId == action.RecId
    //{
    //}

    protected real calcLeftValue(RMarketSubAccount _subAccount, RMarketTimestamp _tsCursor)
    {
        return this.calcValue(
            _subAccount, 
            _tsCursor,
            this.LeftSource,
            this.LeftIndicatorId,
            this.LeftCandleValue,
            this.LeftValue,
            this.LeftIndex,
            this.LeftInterval
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRightValue</Name>
				<Source><![CDATA[
    protected real calcRightValue(RMarketSubAccount _subAccount, RMarketTimestamp _tsCursor)
    {
        return this.calcValue(
            _subAccount,
            _tsCursor,
            this.RightSource,
            this.RightIndicatorId,
            this.RightCandleValue,
            this.RightValue,
            this.RightIndex,
            this.RightInterval
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcValue</Name>
				<Source><![CDATA[
    protected real calcValue(
        RMarketSubAccount           _subAccount, 
        RMarketTimestamp            _tsCursor,
        RMarketConditionValueSource _src,
        RMarketIndicatorId          _indicatorId,
        RMarketIndicatorBaseEnum    _candleValue,
        real                        _value,
        int                         _index,
        RMarketCandleInterval       _interval
        )
    {
        real ret;
        RMarketDim dim;
        RMarketCandleTable candle;
        RMarketIndicatorTable indicator;
        
        if (_src == RMarketConditionValueSource::Candle ||
            _src == RMarketConditionValueSource::Indicator)
        {
            _tsCursor = RMarketUtil::calculateCandleTimestamp(_tsCursor, _interval, _index);
            dim = RMarketDim::findOrCreateDims(
                _subAccount.RMarketAccount().MarketId, 
                _subAccount.SymbolId, 
                _interval);
            if (!dim) 
                throw error(strFmt("Dim (%1, %2, %3) wan't found!", 
                                    _subAccount.RMarketAccount().MarketId,
                                    _subAccount.SymbolId,
                                    _interval));
        }

        switch (_src)
        {
            case RMarketConditionValueSource::Const:
                ret = _value;
                break;

            case RMarketConditionValueSource::Candle:
                candle = RMarketCandleTable::find(dim.RecId, _tsCursor);
                if (!candle) throw error(strFmt("Candle (dim %1, ts %2) wan't found!", dim.RecId, _tsCursor));
                ret = candle.getValue(_candleValue);
                break;

            case RMarketConditionValueSource::Indicator:
                indicator = RMarketIndicatorTable::find(_indicatorId, dim.RecId, _tsCursor);
                if (!candle) throw error(strFmt("Indicator (%1, dim %2, ts %3) wan't found!", _indicatorId, dim.RecId, _tsCursor));
                ret = indicator.Value;
                break;

            case RMarketConditionValueSource::DepositPercentDrawdown:
                break;
                
            case RMarketConditionValueSource::LosingTradesInARow:
                break;
            
            default:
                throw error(strFmt("Calculation from source %1 isn't implemented yet!", enum2Str(_src)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RMarketStrategyAction</Name>
				<Source><![CDATA[
    public RMarketStrategyAction RMarketStrategyAction(boolean _forUpdate = false)
    {
        return RMarketStrategyAction::findRecId(this.RefRecId, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftIndicatorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftCandleValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftIndex</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeftInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComparisonType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightIndicatorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightCandleValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightIndex</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightInterval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Num</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeftSource</Name>
			<EnumType>RMarketConditionValueSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LeftIndicatorId</Name>
			<ExtendedDataType>RMarketIndicatorId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeftCandleValue</Name>
			<EnumType>RMarketIndicatorBaseEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeftIndex</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeftInterval</Name>
			<EnumType>RMarketCandleInterval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LeftValue</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ComparisonType</Name>
			<EnumType>RMarketConditionComparisonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RightSource</Name>
			<EnumType>RMarketConditionValueSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RightIndicatorId</Name>
			<ExtendedDataType>RMarketIndicatorId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RightCandleValue</Name>
			<EnumType>RMarketIndicatorBaseEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RightIndex</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RightInterval</Name>
			<EnumType>RMarketCandleInterval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RightValue</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RMarketStrategyAction</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RMarketStrategyAction</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LeftIndicatorSetupTable</Name>
			<RelatedTable>RMarketIndicatorSetupTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeftIndicatorId</Name>
					<Field>LeftIndicatorId</Field>
					<RelatedField>IndicatorId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>LeftSource</Name>
					<Field>LeftSource</Field>
					<ValueStr>RMarketConditionValueSource::Indicator</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RightIndicatorSetupTable</Name>
			<RelatedTable>RMarketIndicatorSetupTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RightIndicatorId</Name>
					<Field>RightIndicatorId</Field>
					<RelatedField>IndicatorId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RightSource</Name>
					<Field>RightSource</Field>
					<ValueStr>RMarketConditionValueSource::Indicator</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>